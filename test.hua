(require-macro test-macro)

(def a (if 1
         (if true (setv c 2)
             (setv d 4))
         3))

(setv a (if 1
          (if true (setv c 2)
              (setv d 4))
          3))

(def x 1)
(def y 2)

(do
 (def abc nil)
 (setv abc 1))

(setv alfsk.x.y.z "love")

(def adict {"a" 1 "b" 3})
(def alist [1 2 3 4 5])

(test-macro-1 x)

(print "hello," "world")

(table.print "love")

(.method a "hey" "love")

(do
 [1 2 (dosome 4)]
 (print 2)
 (print 3))

(def l1 [1 2 3 (somefunc 4)])
(def l2 [1 2 3 (def xxx 4)])

(def f (fn [a b &rest rest]
         (print a b)
         (print 3 4)
         4))

(def f2 (fn [a b *dotdotdot*]
          (print *dotdotdot*)))

(def t1 (not (print "love")))
(def t2 (len (get {1 2 3 4} 3)))

(def t3 (and true false (print 2)))

(def t4 (+ 1 (if true 4 6)))
(def t4 (f 1 (if true 4 6)))

(print (if 1 4 (, 5 3)))

(def t4 (+ 1 (* 3 (+ 1 2)) (+ 4 (if true 3 5) 3)))

(def t5 (and t1 (or t2 t3 t4) (not t4)))
(def t6 (& 1 2 (bor 123 1)))
(def t7 (concat "test1" "test2" "test3"))

(def a (if true 3 4))

(def (, a b) (if true 3 4))

(def (, a b) (, 1 2))

(def (, c d) (, (if true 4 5) 3))

(def (, e f g) (, 1 (, 3 4)))






(def (, t8 t9) (, 1 (if true 4 3)))



(def (, t10 t11) (if true 3 4))



(def (, t10 t11) (if true (, 1 2) (, 3 4)))



(def b (if 1 2 3))

(defn plus [a b]
  (+ a b))

(print (if true
         (do
          (print "hi")
          (plus 1 3))
         (do
          (print "hate")
          (plus 2 4))))

(progn
 (+ 1 2)
 (setv a 3)
 (dec 3)
 (if true
   3
   2))

(def b(if true
        (do
         (+ 1 2)
         (inc 4))
        2))

(setv (, a b) (if true (1, 2) (3, 4)))

(for* [(, x y) (pairs {1 2 3 4})]
  (print x))

(require-macro hua.core.macros)

(defn plus [x y]
  (+ x y))

(for [(, x y) z
      m k]
  (+ x y m)
  (print x y m))

(def haha (get a-table 1 3 (if true 2 "test")))

(setv (get a-table (if a-bool 12 24) "new") (if another-bool 49 13))

(def x (if true [(func1)] {(func2)}))
